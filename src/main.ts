import { TwistyAlgViewer, TwistyPlayer } from "cubing/twisty";
import "cubing/twisty";

class App {
  // Example of getting an element from the page.
  twistyPlayer: TwistyPlayer = document.querySelector("#main-player");
  shape: HTMLSelectElement = document.querySelector("#shape");
  cutdir: HTMLSelectElement = document.querySelector("#cutdir");
  geo: HTMLInputElement = document.querySelector("#geo");
  cut: HTMLInputElement = document.querySelector("#cut");
//  Example of creating a new element and adding it to the page.
//    twistyAlgViewer = document.body.appendChild(
//      new TwistyAlgViewer({ twistyPlayer: this.twistyPlayer })
//    );
  constructor() {
    this.shape.addEventListener("change", () => { this.updateShapes(); });
    this.cutdir.addEventListener("change", () => { this.updateShapes(); });
    this.cut.addEventListener("change", () => { this.updateShapes(this.cut.value); });
    this.cut.addEventListener("input", () => { this.updateShapes(this.cut.value); });
    this.geo.addEventListener("input", () => { this.updateShapes(this.geo.value); });
    document.querySelector("#clean").addEventListener("click",
      () => { this.clean(); })
    this.twistyPlayer.experimentalSetFlashLevel("none");
  }

  updateShapes(newval?: string): void {
    if (newval !== undefined) {
      this.cut.value = newval;
      this.geo.value = newval;
    } else {
      this.twistyPlayer.alg = "";
    }
    const geo = this.shape.value + " " + this.cutdir.value + " " + this.cut.value;
    this.updatePuzzle(geo);
  }

  updatePuzzle(geo: string): void {
    this.twistyPlayer.experimentalPuzzleDescription = geo;
  }

  clean(): void {
    const goodpts = keypts[this.shape.value + this.cutdir.value] ;
    const eps = 0.05 ;
    let best = 1000 ;
    const ival = +this.cut.value;
    for (const v of goodpts) {
      const delta = Math.abs(v - ival);
      if (Math.abs(v - ival) < eps && Math.abs(v - ival) < Math.abs(best - ival)) {
        best = v;
      }
    }
    if (best != 1000) {
      this.updateShapes(""+best);
    }
  }
}

// Make the app object available in the console for debugging.
// Try running: app.updateScramble()
globalThis.app = new App();

const keypts = {
  te: [0, 0.346184634065199, 0.577350269189626, 0.866025403784437],
  if: [0, 0.0437137412199553, 0.10557280900008, 0.142911758634148,
       0.2360679774998, 0.272067557625603, 0.333333333333342, 0.381966011250105, 0.366293370955617,
       0.461896476441222, 0.527864045000399, 0.555741433418137, 0.56691527068179,
       0.579145823610522, 0.618033988749886, 0.672742662378172,
       0.745355992499953, 0.770969598759586],
  df: [0, 0.105585091198902, 0.236067977499772, 0.358548932642016,
       0.447213595499989, 0.548137753621931, 0.618033988749895, 0.745604667392652],
  ie: [0, 0.118724773661763, 0.136293910356528, 0.157981582327811,
       0.171657248314431, 0.185354472327642, 0.22052817941659, 0.225206963771198,
       0.231801297246193, 0.255235116516706, 0.267616567329866,
       0.279397861264267, 0.295869600077765, 0.302680679737852,
       0.308301945313531, 0.311882116063692, 0.316521888676107,
       0.324005476841408, 0.330792269124856, 0.346272894885839,
       0.356822089773061, 0.36998951851398, 0.408881731069641, 0.427045750483211,
       0.449404510502461, 0.472055041464925, 0.47872706916371, 0.485249039797452,
       0.498843026314944, 0.515190145191102, 0.535233134659677,
       0.548806039292405, 0.577350269189651, 0.618315762969106,
       0.661584538249713, 0.692375929817155, 0.774596669241419, 0.7945579326996,
       0.807144971628418, 0.826580114438045, 0.86602540378442, 0.888053374878366,
       0.934172358962655, 0.944421022283983],
  iv: [0, 0.112482206141184, 0.187592474085081, 0.28138871112762,
       0.562777422255239, 0.736685209782635, 0.794654472291766,
       0.841075170785081, 0.910592997310029],
  tv: [0, 0.333333333333333, 0.600260416666341, 0.999999999500001],
  oe: [0, 0.244789502290502, 0.408248290463866, 0.461990350408647,
       0.489897948556645, 0.524941918234976, 0.61237243569579, 0.689716350284335,
       0.816496580927733, 0.852377778460046],
  of: [0, 0.199869791666992, 0.333333333333, 0.500000000000001],
  dv: [0, 0.0560874285802, 0.0990233221822336, 0.129641954773404,
       0.187592474085079, 0.259374724922907, 0.41946952412161, 0.502579833588376,
       0.531745191119057, 0.562791600335274, 0.592300472889519,
       0.617533116288632, 0.678715947273417, 0.726155636708975,
       0.794654472291768, 0.854832593500508, 0.937962370400783, 1.09818547139511 ],
  de: [0, 0.128563971004914, 0.145308505600951, 0.170241453552642,
       0.200811415886164, 0.20942149071417, 0.214828453505561, 0.224204126002919,
       0.242180842668631, 0.254805789761306, 0.262865556059523, 0.27330868728898,
       0.277514551425611, 0.284605286554775, 0.305018008054503,
       0.313608385297821, 0.324919696232883, 0.345069250323634,
       0.363271264002833, 0.37817914684952, 0.411888053250777, 0.411888053926078,
       0.41188805460115, 0.429660084874436, 0.449027976579373, 0.476892790186451,
       0.525731112119047, 0.544456729884171, 0.547822164005765,
       0.551644835984693, 0.562428193028154, 0.575156248114469,
       0.587785252292405, 0.606349458290752, 0.634037677529931, 0.64731718197753,
       0.726542528005439, 0.777241350811778, 0.79854751226776, 0.817679191298903,
       0.85065080835193, 0.886439952295727, 0.951056516295154, 1.02604067771384],
  tf: [0],
  cv: [0, 0.239059095459766, 0.577350269189594, 0.915641442663986,
       1.15470053837926],
  ce: [0, 0.261021839065223, 0.353553390593277, 0.414205290678296,
       0.471404520791054, 0.546902900980241, 0.707106781186553,
       0.943269392613834],
  cf: [0, 0.333984374995405],
  ov: [0, 0.433012701892219, 0.577350269189626, 0.692933086751677,
       0.8660254038],
  };
  
